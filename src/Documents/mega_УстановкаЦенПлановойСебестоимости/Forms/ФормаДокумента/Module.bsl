///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2023, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКоманды = ОбщегоНазначения.ОбщийМодуль("ПодключаемыеКоманды");
		МодульПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды 		
КонецПроцедуры   

&НаКлиенте
Процедура ПриОткрытии(Отказ)  
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиентСервер = ОбщегоНазначения.ОбщийМодуль("ПодключаемыеКомандыКлиентСервер");
		МодульПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьПоДокументуОснованию(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не указан документ-основание.'"),
			,, "Объект.ДокументОснование", );
		Возврат;
	КонецЕсли;
	
	Если Объект.Состав.Количество() = 0 Тогда
		
		ЗаполнитьПоДокументуОснованиюНаСервере();
		Модифицированность = Истина;
	Иначе
		Режим = РежимДиалогаВопрос.ДаНет;
		
		ОписаниеОповещенияОЗавершении = 
			Новый ОписаниеОповещения("ПослеЗакрытияВопросаОбОчисткеТаблицыСоставПоДокументуОснованию", ЭтотОбъект);	
		
		ПоказатьВопрос(ОписаниеОповещенияОЗавершении, 
			НСтр("ru = 'Перед заполнением табличная часть будет очищена. Продолжить?';"), Режим, 0);		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоГруппе(Команда)
	
	
	Если Объект.Состав.Количество() = 0 Тогда
		
		ПоказатьДиалогВыбораГруппыНоменклатуры();		
		Модифицированность = Истина;
	Иначе
		Режим = РежимДиалогаВопрос.ДаНет;
		
		ОписаниеОповещенияОЗавершении = 
			Новый ОписаниеОповещения("ПослеЗакрытияВопросаОбОчисткеТаблицыСоставПоГруппе", ЭтотОбъект);	
		
		ПоказатьВопрос(ОписаниеОповещенияОЗавершении, 
			НСтр("ru = 'Перед заполнением табличная часть будет очищена. Продолжить?';"), Режим, 0);		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНулевыми(Команда)

	Если Объект.Состав.Количество() = 0 Тогда
				
		ЗаполнитьНулевымиНаСервере();		
		Модифицированность = Истина;
	Иначе
		Режим = РежимДиалогаВопрос.ДаНет;
		
		ОписаниеОповещенияОЗавершении = 
			Новый ОписаниеОповещения("ПослеЗакрытияВопросаОбОчисткеТаблицыСоставПоНулевым", ЭтотОбъект);	
		
		ПоказатьВопрос(ОписаниеОповещенияОЗавершении, 
			НСтр("ru = 'Перед заполнением табличная часть будет очищена. Продолжить?';"), Режим, 0);		
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНулевые(Команда)
	
	ЗаполнитьНулевымиНаСервере();
	
	Модифицированность = Истина;
КонецПроцедуры


&НаКлиенте
Процедура ДобавитьПоГруппе(Команда)
	
	ПоказатьДиалогВыбораГруппыНоменклатуры(Истина);
КонецПроцедуры


&НаКлиенте
Процедура ИзменитьНаПроцент(Команда)
	
	ОписаниеОЗавершенииВводаЧисла = Новый ОписаниеОповещения("ВводПроцентаИзмененияЗавершение", ЭтотОбъект);
	
	Число = 0;
	ПоказатьВводЧисла(ОписаниеОЗавершенииВводаЧисла, Число, "Введите процент изменения", 15, 2);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОперацииСпецификации(Команда)
	
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ОписаниеОповещенияОЗакрытииВыбораСпецификацииДляОпераций", 
		ЭтотОбъект);
	ПоказатьДиалогВыбораСпецификации(ОписаниеОповещенияОЗакрытии);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьМатериалыСпецификации(Команда)
	
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ОписаниеОповещенияОЗакрытииВыбораСпецификацииДляМатериалов", 
		ЭтотОбъект);
	ПоказатьДиалогВыбораСпецификации(ОписаниеОповещенияОЗакрытии);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВидыСтадийОбработкиСпецификации(Команда)
	
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ОписаниеОповещенияОЗакрытииВыбораСпецификацииДляВидовСтадийОбработки", 
		ЭтотОбъект);
	ПоказатьДиалогВыбораСпецификации(ОписаниеОповещенияОЗакрытии);
КонецПроцедуры


#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыСостав

&НаКлиенте
Процедура СоставНоменклатураПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Состав	.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		Структура = Новый Структура(
		"Номенклатура,
		|ВидСтадииОбработки,
		|ЕдиницаИзмерения,		
		|Цена,
		|ДатаЦен");
		ЗаполнитьЗначенияСвойств(Структура, ТекущиеДанные);
		Структура.ДатаЦен = Объект.Дата;
		
		ПриИзмененииНоменклатурыНаСервере(Структура);
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, Структура);
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура СоставВидСтадииОбработкиПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Состав	.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		Структура = Новый Структура(
		"Номенклатура,
		|ВидСтадииОбработки,
		|ЕдиницаИзмерения,		
		|Цена,
		|ДатаЦен");
		ЗаполнитьЗначенияСвойств(Структура, ТекущиеДанные);
		Структура.ДатаЦен = Объект.Дата;
		
		ПриИзмененииНоменклатурыНаСервере(Структура);
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, Структура);
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОписаниеОповещенияОЗакрытииВыбораСпецификацииДляМатериалов(ВыбранноеЗначение, ДополнительныеПараметры)Экспорт

	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда	
			
		ЗаполнитьМатериалыПоСпецификацииНаСервере(ВыбранноеЗначение);
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеОповещенияОЗакрытииВыбораСпецификацииДляВидовСтадийОбработки(ВыбранноеЗначение, ДополнительныеПараметры)Экспорт
		
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		
		ЗаполнитьВидыСтадийОбработкиПоСпецификацииНаСервере(ВыбранноеЗначение);
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеОповещенияОЗакрытииВыбораСпецификацииДляОпераций(ВыбранноеЗначение, ДополнительныеПараметры)Экспорт
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда	
		
		ЗаполнитьОперацииПоСпецификацииНаСервере(ВыбранноеЗначение);
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеОповещенияОЗакрытииВыбораГруппы(ВыбранноеЗначение, ДополнительныеПараметры)Экспорт
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
	
		Если НЕ ДополнительныеПараметры.Свойство("Добавлять") ИЛИ НЕ ДополнительныеПараметры.Добавлять Тогда
		
			Объект.Состав.Очистить();
		КонецЕсли;
		
		ЗаполнитьПоГруппеНаСервере(ВыбранноеЗначение);
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДиалогВыбораСпецификации(ОписаниеОповещенияОЗакрытии)
		
	ОткрытьФорму("Справочник.mega_Спецификации.ФормаВыбора", , 
		ЭтотОбъект, , , , ОписаниеОповещенияОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДиалогВыбораГруппыНоменклатуры(Добавлять = Ложь)
	
	ДополнительныеПараметры = Новый Структура("Добавлять", Добавлять);
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ОписаниеОповещенияОЗакрытииВыбораГруппы", 
		ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("Справочник.mega_Номенклатура.ФормаВыбораГруппы", , 
		ЭтотОбъект, , , , ОписаниеОповещенияОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ВводПроцентаИзмененияЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
    Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		
		ИзменитьЦеныНаПроцентНаСервере(ВыбранноеЗначение);
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаОбОчисткеТаблицыСоставПоДокументуОснованию(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
    
    Если ВыбранноеЗначение = КодВозвратаДиалога.Нет Тогда
		Возврат;   	
	КонецЕсли;
    
    ПослеЗакрытияВопросаОбОчисткеТаблицыСостав(ВыбранноеЗначение);
	ЗаполнитьПоДокументуОснованиюНаСервере();
	
	Модифицированность = Истина;	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаОбОчисткеТаблицыСоставПоГруппе(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
    Если ВыбранноеЗначение = КодВозвратаДиалога.Нет Тогда
		Возврат;   	
	КонецЕсли;
    	
    ПослеЗакрытияВопросаОбОчисткеТаблицыСостав(ВыбранноеЗначение);
	ПоказатьДиалогВыбораГруппыНоменклатуры();
	
	Модифицированность = Истина;	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаОбОчисткеТаблицыСоставПоНулевым(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
   
   	Если ВыбранноеЗначение = КодВозвратаДиалога.Нет Тогда
		Возврат;   	
	КонецЕсли;

	Объект.Состав.Очистить();
	   
   	ЗаполнитьНулевымиНаСервере();
   	
   	Модифицированность = Истина;	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаОбОчисткеТаблицыСостав(Результат)
    
    Если Результат = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
	
	Объект.Состав.Очистить();		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНулевымиНаСервере()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
    ДокументОбъект.ЗаполнитьНулевыми();
   	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
КонецПроцедуры


&НаСервере
Процедура ИзменитьЦеныНаПроцентНаСервере(Процент = 0)
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
    ДокументОбъект.ИзменитьЦеныНаПроцент(Процент);
   	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоДокументуОснованиюНаСервере()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
    ДокументОбъект.ЗаполнитьПоДокументуОснованию();
   	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМатериалыПоСпецификацииНаСервере(Спецификация)
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
    ДокументОбъект.ЗаполнитьМатериалыПоСпецификации(Спецификация);
   	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВидыСтадийОбработкиПоСпецификацииНаСервере(Спецификация)
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
    ДокументОбъект.ЗаполнитьВидыСтадийОбработкиПоСпецификации(Спецификация);
   	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОперацииПоСпецификацииНаСервере(Спецификация)
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
    ДокументОбъект.ЗаполнитьОперацииПоСпецификации(Спецификация);
   	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоГруппеНаСервере(Группа)
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
    ДокументОбъект.ЗаполнитьПоГруппе(Группа);
   	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПриИзмененииНоменклатурыНаСервере(Структура)
	
	Структура.ЕдиницаИзмерения = Справочники.mega_ЕдиницыИзмерения.ПустаяСсылка();	
	Структура.Цена = 0;
			
	Если ЗначениеЗаполнено(Структура.Номенклатура) Тогда
		
		Структура.ЕдиницаИзмерения = 
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Структура.Номенклатура, "ЕдиницаИзмерения");
			
		Структура.Цена = РегистрыСведений.mega_ЦеныПлановойСебестоимости.ПолучитьПоследнююЦенуПлановойСебестоимости(
			Структура.Номенклатура, Структура.ВидСтадииОбработки, Структура.ДатаЦен);
	КонецЕсли;	
КонецПроцедуры

// Управляет доступностью элементов формы.
&НаКлиенте
Процедура УправлениеДоступностью()
	

КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
	МодульПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	МодульПодключаемыеКоманды = ОбщегоНазначения.ОбщийМодуль("ПодключаемыеКоманды");
	МодульПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	МодульПодключаемыеКомандыКлиентСервер = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиентСервер");
	МодульПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти 

