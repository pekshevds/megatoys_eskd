///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2023, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКоманды = ОбщегоНазначения.ОбщийМодуль("ПодключаемыеКоманды");
		МодульПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры   

&НаКлиенте
Процедура ПриОткрытии(Отказ)  	
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	УправлениеДоступностью();	
	УстановитьЗаголовкиСтолбцов();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиентСервер = ОбщегоНазначения.ОбщийМодуль("ПодключаемыеКомандыКлиентСервер");
		МодульПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Справочник.mega_ПроизводственныеРесурсы.ФормаВыбора" Тогда
	
		ОбработкаВыбораПроизводственногоРесурсаНаСервере(ВыбранноеЗначение);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьПоУмолчанию(Команда)
	
	Если Объект.ПроизводственныеРесурсы.Количество() = 0 Тогда
		
		Возврат;
	КонецЕсли;
	
	Режим = РежимДиалогаВопрос.ДаНет;
	ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОНеобходимостиЗаполненияПоУмолчанию", ЭтотОбъект);	
	ПоказатьВопрос(ОписаниеОповещенияОЗавершении, НСтр("ru = 'Перед заполнением данные времени будут очищены. Продолжить?';"), Режим, 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборРесурсов(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
	ПараметрыОткрытия.Вставить("ЗакрыватьПриВыборе", Ложь);
	
	ОткрытьФорму("Справочник.mega_ПроизводственныеРесурсы.ФормаВыбора", 
		ПараметрыОткрытия, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПериодГодПриИзменении(Элемент)

	УстановитьЗаголовкиСтолбцов();

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПослеЗакрытияВопросаОНеобходимостиЗаполненияПоУмолчанию(Результат, Параметры) Экспорт
    
    Если Результат = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
	
	ЗаполнитьПоУмолчаниюНаСервере();
КонецПроцедуры

&НаСервере
Процедура СкрытьСтолбцы()
	
	Для индекс = 1 По 366 Цикл
		
		Элементы["ПроизводственныеРесурсыВремя" + Формат(индекс, "ЧЦ=4; ЧГ=0;")].Видимость = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьВремя()
	
	Для Каждого ТекСтрокаПроизводственныеРесурсы Из Объект.ПроизводственныеРесурсы Цикл
		Для индекс = 1 По 366 Цикл
			
			ТекСтрокаПроизводственныеРесурсы["Время" + Формат(индекс, "ЧЦ=4; ЧГ=0;")] = 0;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовкиСтолбцов()
	
	ОдинДень = 24*3600;
	ПериодГод = ?(Объект.ПериодГод = 0, Год(ТекущаяДатаСеанса()), Объект.ПериодГод);
	
	СкрытьСтолбцы();	
		
	ТекущийДень = Дата(ПериодГод, 1, 1, 0, 0, 0);
	ПоследнийДень = НачалоДня(КонецГода(ТекущийДень));
	Пока ТекущийДень <= ПоследнийДень Цикл
		
		Столбец = Элементы["ПроизводственныеРесурсыВремя" + Формат(ДеньГода(ТекущийДень), "ЧЦ=4; ЧГ=0;")];		
		Столбец.Заголовок = Формат(ТекущийДень, "ДФ='dd MMMM';");
		Столбец.Видимость = Истина;
		
		ТекущийДень = ТекущийДень + ОдинДень;
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоУмолчаниюНаСервере()
	
	ОдинДень = 24*3600;
	
	Годы = Новый Массив;
	Годы.Добавить(Объект.ПериодГод);
	
	ДанныеПроизводственногоКалендаря = 
		Справочники.ПроизводственныеКалендари.ДанныеПроизводственногоКалендаря(Объект.ПроизводственныйКалендарь, Годы);
	ДанныеПроизводственногоКалендаря.Индексы.Добавить("Дата");
	
	ОчиститьВремя();
	
	Для Каждого ТекСтрокаПроизводственныеРесурсы Из Объект.ПроизводственныеРесурсы Цикл
		
		ТекущийДень = Дата(Объект.ПериодГод, 1, 1, 0, 0, 0);
		ПоследнийДень = НачалоДня(КонецГода(ТекущийДень));
		Пока ТекущийДень <= ПоследнийДень Цикл
			
			ТекСтрокаПроизводственныеРесурсы["Время" + Формат(ДеньГода(ТекущийДень), "ЧЦ=4; ЧГ=0;")] = 0;			
			Если Справочники.ПроизводственныеКалендари.ЭтоРабочийДень(ДанныеПроизводственногоКалендаря, ТекущийДень) Тогда
				
				ТекСтрокаПроизводственныеРесурсы["Время" + Формат(ДеньГода(ТекущийДень), "ЧЦ=4; ЧГ=0;")] = 
					ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекСтрокаПроизводственныеРесурсы.Ресурс, "Время"); 
			КонецЕсли;
			
			ТекущийДень = ТекущийДень + ОдинДень;
		КонецЦикла;		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПроизводственногоРесурсаНаСервере(Ресурс)
	
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("Ресурс", Ресурс);
	НайденыеСтроки = Объект.ПроизводственныеРесурсы.НайтиСтроки(ПараметрыПоиска);
	Если НайденыеСтроки.Количество() = 0 Тогда
		
		НоваяСтрока = Объект.ПроизводственныеРесурсы.Добавить();
		НоваяСтрока.Ресурс = Ресурс;
	КонецЕсли;
КонецПроцедуры

// Управляет доступностью элементов формы.
&НаКлиенте
Процедура УправлениеДоступностью()
	

КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
	МодульПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	МодульПодключаемыеКоманды = ОбщегоНазначения.ОбщийМодуль("ПодключаемыеКоманды");
	МодульПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	МодульПодключаемыеКомандыКлиентСервер = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиентСервер");
	МодульПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти
