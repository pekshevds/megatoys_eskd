///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2023, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКоманды = ОбщегоНазначения.ОбщийМодуль("ПодключаемыеКоманды");
		МодульПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды 		
КонецПроцедуры   

&НаКлиенте
Процедура ПриОткрытии(Отказ)  
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ЗаполнитьОстаткиНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиентСервер = ОбщегоНазначения.ОбщийМодуль("ПодключаемыеКомандыКлиентСервер");
		МодульПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	КонецЕсли;
	
	ЗаполнитьОстаткиНаСервере();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПодразделениеЗаказчикПриИзменении(Элемент)
	
	ЗаполнитьОстаткиНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеИсполнительПриИзменении(Элемент)
	
	ЗаполнитьОстаткиНаСервере();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСостав

&НаКлиенте
Процедура СоставПриИзменении(Элемент)
	
	ЗаполнитьОстаткиНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СоставНоменклатураПриИзменении(Элемент)
	
	СоставНоменклатураПриИзмененииНаКлиенте()
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьОстаткиНаСервере()
	
	ДатаСреза = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ДатаСреза = КонецДня(ДатаСреза);
	КонецЕсли;	
	Номенклатура = Объект.Состав.Выгрузить().ВыгрузитьКолонку("Номенклатура");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СкладскиеЗапасыОстатки.Номенклатура,
		|	СкладскиеЗапасыОстатки.КоличествоОстаток КАК Остаток
		|ПОМЕСТИТЬ втОстаткиЗаказчика
		|ИЗ
		|	РегистрНакопления.mega_СкладскиеЗапасы.Остатки(&ДатаСреза, Номенклатура В (&Номенклатура)
		|	И Подразделение = &Заказчик) КАК СкладскиеЗапасыОстатки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СкладскиеЗапасыОстатки.Номенклатура,
		|	СкладскиеЗапасыОстатки.КоличествоОстаток КАК Остаток
		|ПОМЕСТИТЬ втОстаткиИсполнителя
		|ИЗ
		|	РегистрНакопления.mega_СкладскиеЗапасы.Остатки(&ДатаСреза, Номенклатура В (&Номенклатура)
		|	И Подразделение = &Исполнитель) КАК СкладскиеЗапасыОстатки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СкладскиеЗапасыОстатки.Номенклатура,
		|	СкладскиеЗапасыОстатки.КоличествоОстаток КАК Остаток
		|ПОМЕСТИТЬ втОстаткиДругие
		|ИЗ
		|	РегистрНакопления.mega_СкладскиеЗапасы.Остатки(&ДатаСреза, Номенклатура В (&Номенклатура)
		|	И НЕ Подразделение В (&Заказчик, &Исполнитель)) КАК СкладскиеЗапасыОстатки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.Номенклатура,
		|	СУММА(ВложенныйЗапрос.УЗаказчика) КАК УЗаказчика,
		|	СУММА(ВложенныйЗапрос.УИсполнителя) КАК УИсполнителя,
		|	СУММА(ВложенныйЗапрос.УДругих) КАК УДругих
		|ИЗ
		|	(ВЫБРАТЬ
		|		втОстаткиЗаказчика.Номенклатура,
		|		втОстаткиЗаказчика.Остаток КАК УЗаказчика,
		|		0 КАК УИсполнителя,
		|		0 КАК УДругих
		|	ИЗ
		|		втОстаткиЗаказчика КАК втОстаткиЗаказчика
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|	ВЫБРАТЬ
		|		втОстаткиИсполнителя.Номенклатура КАК Поле1,
		|		0 КАК Поле3,
		|		втОстаткиИсполнителя.Остаток КАК Поле2,
		|		0 КАК Поле4
		|	ИЗ
		|		втОстаткиИсполнителя КАК втОстаткиИсполнителя
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|	ВЫБРАТЬ
		|		втОстаткиДругие.Номенклатура КАК Поле1,
		|		0 КАК Поле3,
		|		0 КАК Поле4,
		|		втОстаткиДругие.Остаток КАК Поле2
		|	ИЗ
		|		втОстаткиДругие КАК втОстаткиДругие) КАК ВложенныйЗапрос
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.Номенклатура";
	
	Запрос.УстановитьПараметр("Заказчик", Объект.ПодразделениеЗаказчик);
	Запрос.УстановитьПараметр("Исполнитель", Объект.ПодразделениеИсполнитель);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("ДатаСреза", ДатаСреза);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Для Каждого ТекСтрокаСостав Из Объект.Состав Цикл
		
		Структура = Новый Структура;
		Структура.Вставить("Номенклатура", ТекСтрокаСостав.Номенклатура);
		
		ТекСтрокаСостав.Остаток = 0;
		ТекСтрокаСостав.ОстатокЗаказчика = 0;
		ТекСтрокаСостав.ОстатокИсполнителя = 0;
		Если ВыборкаДетальныеЗаписи.НайтиСледующий(Структура) Тогда
			
			ТекСтрокаСостав.ОстатокЗаказчика = ВыборкаДетальныеЗаписи.УЗаказчика;
			ТекСтрокаСостав.ОстатокИсполнителя = ВыборкаДетальныеЗаписи.УИсполнителя;
			ТекСтрокаСостав.Остаток = ВыборкаДетальныеЗаписи.УДругих;
		КонецЕсли;
	КонецЦикла;
			
КонецПроцедуры

&НаКлиенте
Процедура СоставНоменклатураПриИзмененииНаКлиенте()
	
	ТекущиеДанные = Элементы.Состав.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		Структура = Новый Структура(
		"Номенклатура,
		|ЕдиницаИзмерения,
		|Количество");
		ЗаполнитьЗначенияСвойств(Структура, ТекущиеДанные);
		СоставНоменклатураПриИзмененииНаСервере(Структура);
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, Структура);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СоставНоменклатураПриИзмененииНаСервере(Структура)
	
	Структура.ЕдиницаИзмерения = Справочники.mega_ЕдиницыИзмерения.ПустаяСсылка();	
			
	Если ЗначениеЗаполнено(Структура.Номенклатура) Тогда
		
		Структура.ЕдиницаИзмерения = 
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Структура.Номенклатура, "ЕдиницаИзмерения");
	КонецЕсли;	
КонецПроцедуры

// Управляет доступностью элементов формы.
&НаКлиенте
Процедура УправлениеДоступностью()
	

КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
	МодульПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	МодульПодключаемыеКоманды = ОбщегоНазначения.ОбщийМодуль("ПодключаемыеКоманды");
	МодульПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	МодульПодключаемыеКомандыКлиентСервер = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиентСервер");
	МодульПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти 

