///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2023, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКоманды = ОбщегоНазначения.ОбщийМодуль("ПодключаемыеКоманды");
		МодульПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды 		
КонецПроцедуры   

&НаКлиенте
Процедура ПриОткрытии(Отказ)  
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ВывестиИнформациюОЗагруженностиПроизводственногоРесурсаСтрокой();
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиентСервер = ОбщегоНазначения.ОбщийМодуль("ПодключаемыеКомандыКлиентСервер");
		МодульПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьПоПлануПроизводства(Команда)
	
	Если Объект.ТехнологическиеОперации.Количество() = 0 Тогда
		
		ЗаполнитьПоПлануПроизводстваНаСервере();
		ВывестиИнформациюОЗагруженностиПроизводственногоРесурсаСтрокой();
	Иначе
		Режим = РежимДиалогаВопрос.ДаНет;
		
		ОписаниеОповещенияОЗавершении = 
			Новый ОписаниеОповещения("ПослеЗакрытияВопросаОНеобходимостиЗаполненияПоПлануПроизводства", ЭтотОбъект);	
		
		ПоказатьВопрос(ОписаниеОповещенияОЗавершении, 
			НСтр("ru = 'Перед заполнением табличная часть будет очищена. Продолжить?';"), Режим, 0);		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТехнологическиеОперации

&НаКлиенте
Процедура ТехнологическиеОперацииПриИзменении(Элемент)
	
	ВывестиИнформациюОЗагруженностиПроизводственногоРесурсаСтрокой();
КонецПроцедуры

&НаКлиенте
Процедура ТехнологическиеОперацииНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТехнологическиеОперации.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		Структура = Новый Структура(
		"Номенклатура,
		|Спецификация,
		|ЕдиницаИзмерения,
		|ВидСтадииОбработки,
		|ТехнологическаяОперация,
		|ТехнологическаяОперацияЕдиницаИзмерения,
		|ТехнологическаяОперацияКоличество,
		|Количество");
		ЗаполнитьЗначенияСвойств(Структура, ТекущиеДанные);
		ПриИзмененииНоменклатурыНаСервере(Структура);
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, Структура);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТехнологическиеОперацииТехнологическаяОперацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТехнологическиеОперации.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		Спецификация = ТекущиеДанные.Спецификация;
		Если ЗначениеЗаполнено(Спецификация) Тогда			
			
			ВидСтадииОбработки = ТекущиеДанные.ВидСтадииОбработки;
			
			ТехОперации = Новый СписокЗначений(); 
			ТехОперации.ЗагрузитьЗначения(
				ПолучитьДоступныеТехнологическиеОперацииНаСервере(Спецификация, ВидСтадииОбработки));
			ДанныеВыбора = ТехОперации;
			
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТехнологическиеОперацииВидСтадииОбработкиПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТехнологическиеОперации.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		Спецификация = ТекущиеДанные.Спецификация;
		ВидСтадииОбработки = ТекущиеДанные.ВидСтадииОбработки;
		Если ЗначениеЗаполнено(Спецификация) И ЗначениеЗаполнено(ВидСтадииОбработки) Тогда			
			
			ТекущиеДанные.ТехнологическаяОперация = Неопределено;
			
			ТехОперации = ПолучитьДоступныеТехнологическиеОперацииНаСервере(Спецификация, ВидСтадииОбработки);
			Если ТехОперации.Количество() > 0 Тогда
				
				ТекущиеДанные.ТехнологическаяОперация = ТехОперации[0];
			КонецЕсли;
			
			ТехнологическиеОперацииТехнологическаяОперацияПриИзменении(Неопределено);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТехнологическиеОперацииТехнологическаяОперацияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТехнологическиеОперации.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		Структура = Новый Структура(
		"ТехнологическаяОперация,
		|Спецификация,
		|ВидСтадииОбработки,
		|ТехнологическаяОперацияЕдиницаИзмерения,
		|ТехнологическаяОперацияКоличество,
		|Количество");
		
		ЗаполнитьЗначенияСвойств(Структура, ТекущиеДанные);
		ПриИзмененииТехнологическойОперацииНаСервере(Структура);
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, Структура);
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ТехнологическиеОперацииВидСтадииОбработкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТехнологическиеОперации.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		Спецификация = ТекущиеДанные.Спецификация;
		Если ЗначениеЗаполнено(Спецификация) Тогда			
	
			ВидыСтадийОбработки = Новый СписокЗначений(); 
			//ВидыСтадийОбработки.ЗагрузитьЗначения(ПолучитьДоступныеВидыСтадийОбработкиНаСервере(Спецификация));
			ВидыСтадийОбработки.ЗагрузитьЗначения(
				ПолучитьДоступныеВидыСтадийОбработкиПоПроизводственномуРесурсуНаСервере(Спецификация, Объект.ПроизводственныйРесурс));
			ДанныеВыбора = ВидыСтадийОбработки;
			
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТехнологическиеОперацииКоличествоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТехнологическиеОперации.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		Структура = Новый Структура(
		"ТехнологическаяОперация,
		|Спецификация,
		|ВидСтадииОбработки,
		|ТехнологическаяОперацияКоличество,
		|Количество");
		
		ЗаполнитьЗначенияСвойств(Структура, ТекущиеДанные);		
		ПриИзмененииТехнологическаяОперацияКоличествоНаСервере(Структура);
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, Структура);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция ПолучитьДоступныеТехнологическиеОперацииНаСервере(Спецификация, ВидСтадииОбработки)
	Возврат Справочники.mega_Спецификации.ПолучитьДоступныеТехнологическиеОперации(Спецификация, ВидСтадииОбработки);
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДоступныеВидыСтадийОбработкиПоПроизводственномуРесурсуНаСервере(Спецификация, ПроизводственныйРесурс)
	Возврат Справочники.mega_Спецификации.ПолучитьДоступныеВидыСтадийОбработкиПоПроизводственномуРесурсу(
		Спецификация, ПроизводственныйРесурс);
КонецФункции

&НаСервереБезКонтекста
Процедура ПриИзмененииТехнологическаяОперацияКоличествоНаСервере(Структура)
	
	
	Если ЗначениеЗаполнено(Структура.Спецификация)
		И ЗначениеЗаполнено(Структура.ВидСтадииОбработки)
		И ЗначениеЗаполнено(Структура.ТехнологическаяОперация) Тогда
				
		Структура.ТехнологическаяОперацияКоличество = 
			ПолучитьДлительностьТехнологическойОперацииНаСервере(
				Структура.Спецификация, Структура.ВидСтадииОбработки, Структура.ТехнологическаяОперация) * 
					Структура.Количество;	
	КонецЕсли;	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПриИзменениитехнологическойОперацииНаСервере(Структура)
	
	Структура.ТехнологическаяОперацияЕдиницаИзмерения = Справочники.mega_ЕдиницыИзмерения.ПустаяСсылка();
			
	Если ЗначениеЗаполнено(Структура.ТехнологическаяОперация) Тогда
				
		Структура.ТехнологическаяОперацияЕдиницаИзмерения = 
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Структура.ТехнологическаяОперация, "ЕдиницаИзмерения");
		Структура.ТехнологическаяОперацияКоличество = Структура.Количество;	
		
		ПриИзмененииТехнологическаяОперацияКоличествоНаСервере(Структура);	
	КонецЕсли;	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПриИзмененииНоменклатурыНаСервере(Структура)
	
	Структура.ЕдиницаИзмерения = Справочники.mega_ЕдиницыИзмерения.ПустаяСсылка();
	Структура.Спецификация = Справочники.mega_Спецификации.ПустаяСсылка();
	Структура.ВидСтадииОбработки = Справочники.mega_ВидыСтадийОбработки.ПустаяСсылка();
	Структура.ТехнологическаяОперация = Справочники.mega_Номенклатура.ПустаяСсылка();
	Структура.ТехнологическаяОперацияЕдиницаИзмерения = Справочники.mega_ЕдиницыИзмерения.ПустаяСсылка();
	Структура.ТехнологическаяОперацияКоличество = 0;
	Структура.Количество = 0;	
		
	Если ЗначениеЗаполнено(Структура.Номенклатура) Тогда
		
		Структура.ЕдиницаИзмерения = 
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Структура.Номенклатура, "ЕдиницаИзмерения");		
		Структура.Спецификация = Справочники.mega_Спецификации.ПолучитьОсновнуюСпецификациюНоменклатуры(Структура.Номенклатура);
		
		Если ЗначениеЗаполнено(Структура.Спецификация) Тогда
			ПоследнюяСтадияОбработки = Справочники.mega_Спецификации.ПолучитьПоследнююСтадиюОбработки(Структура.Спецификация);
			Структура.ВидСтадииОбработки = ПоследнюяСтадияОбработки.ВидСтадииОбработки; 
		КонецЕсли;		
	КонецЕсли;	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДлительностьТехнологическойОперацииНаСервере(Спецификация, ВидСтадииОбработки, ТехнологическаяОперация)
    
	Возврат Справочники.mega_Спецификации.ПолучитьДлительностьТехнологическойОперации(
   		Спецификация, ВидСтадииОбработки, ТехнологическаяОперация);   
КонецФункции

&НаКлиенте
Процедура ПослеЗакрытияВопросаОНеобходимостиЗаполненияПоПлануПроизводства(Результат, Параметры) Экспорт
    
    Если Результат = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
	
	Объект.ТехнологическиеОперации.Очистить();	
	ЗаполнитьПоПлануПроизводстваНаСервере();
	
	ВывестиИнформациюОЗагруженностиПроизводственногоРесурсаСтрокой();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоПлануПроизводстваНаСервере()
    
    ДокументОбъект = РеквизитФормыВЗначение("Объект");
    ДокументОбъект.ЗаполнитьПоПлануПроизводства();
   	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
КонецПроцедуры

// Управляет доступностью элементов формы.
&НаКлиенте
Процедура УправлениеДоступностью()
	

КонецПроцедуры

&НаКлиенте
Процедура ВывестиИнформациюОЗагруженностиПроизводственногоРесурсаСтрокой()
	
	Элементы.ТехнологическиеОперацииТехнологическаяОперацияКоличество.ТекстПодвала = 
		ПолучитьИнформациюОЗагруженностиПроизводственногоРесурсаСтрокой();
КонецПроцедуры

&НаСервере
Функция ПолучитьИнформациюОЗагруженностиПроизводственногоРесурсаСтрокой()
	
	ОдинЧас = 60*60; 
	
	ДоступноеВремяПроизводственногоРесурсаВЧасах = 0;
	Если ЗначениеЗаполнено(Объект.ПроизводственныйРесурс) Тогда
		ДоступноеВремяПроизводственногоРесурсаВЧасах = 
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ПроизводственныйРесурс, "Время");
	КонецЕсли;
	
	ЗанятоеВремяПроизводственногоРесурсаВПроцентах = 0;	
	Если ДоступноеВремяПроизводственногоРесурсаВЧасах > 0 Тогда
		
		ЗанятоеВремяПроизводственногоРесурсаВЧасах = 
			Окр(Объект.ТехнологическиеОперации.Итог("ТехнологическаяОперацияКоличество") / ОдинЧас, 0, РежимОкругления.Окр15как20);
	
		ЗанятоеВремяПроизводственногоРесурсаВПроцентах = 
			Окр(ЗанятоеВремяПроизводственногоРесурсаВЧасах * 100 / ДоступноеВремяПроизводственногоРесурсаВЧасах, 2, РежимОкругления.Окр15как20);
	КонецЕсли;	
	Возврат СтрШаблон("Занятость ресурса %1", ЗанятоеВремяПроизводственногоРесурсаВПроцентах) + "%";	
КонецФункции

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
	МодульПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	МодульПодключаемыеКоманды = ОбщегоНазначения.ОбщийМодуль("ПодключаемыеКоманды");
	МодульПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	МодульПодключаемыеКомандыКлиентСервер = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиентСервер");
	МодульПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти 

