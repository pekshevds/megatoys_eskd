///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2023, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКоманды = ОбщегоНазначения.ОбщийМодуль("ПодключаемыеКоманды");
		МодульПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды 		
КонецПроцедуры   

&НаКлиенте
Процедура ПриОткрытии(Отказ)  
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ВывестиИнформациюОЗагруженностиПроизводственногоРесурсаСтрокой();
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиентСервер = ОбщегоНазначения.ОбщийМодуль("ПодключаемыеКомандыКлиентСервер");
		МодульПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = 
		"Документ.mega_СменноеЗадание.Форма.ФормаПодбораПоОстаткамПредыдущихВидовСтадийПроизводства" Тогда
		
		ОбработатьВыборЗначенияПоОстаткамПредыдущихВидовСтадийПроизводстваНаСервере(ВыбранноеЗначение);
	КонецЕсли;
	
	ВывестиИнформациюОЗагруженностиПроизводственногоРесурсаСтрокой();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПлануПроизводства(Команда)
	
	Если Объект.ТехнологическиеОперации.Количество() = 0 Тогда
		
		ЗаполнитьПоПлануПроизводстваНаСервере();
		ВывестиИнформациюОЗагруженностиПроизводственногоРесурсаСтрокой();
	Иначе
		Режим = РежимДиалогаВопрос.ДаНет;
		
		ОписаниеОповещенияОЗавершении = 
			Новый ОписаниеОповещения("ПослеЗакрытияВопросаОНеобходимостиЗаполненияПоПлануПроизводства", ЭтотОбъект);	
		
		ПоказатьВопрос(ОписаниеОповещенияОЗавершении, 
			НСтр("ru = 'Перед заполнением табличная часть будет очищена. Продолжить?';"), Режим, 0);		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборПоОстаткамПредыдущихВидовСтадийПроизводства(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.ПроизводственныйРесурс) Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			"Не заполнен Производственный ресурс", , , "Объект.ПроизводственныйРесурс", );
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Подразделение) Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			"Не заполнен Подразделение", , , "Объект.Подразделение", );
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ПроизводственныйРесурс", Объект.ПроизводственныйРесурс);
	ПараметрыОткрытия.Вставить("Подразделение", Объект.Подразделение);	
	ПараметрыОткрытия.Вставить("ФормаВыбора", Истина);
	ПараметрыОткрытия.Вставить("МножественныйВыбор", Ложь);
	ПараметрыОткрытия.Вставить("ЗакрыватьПриВыборе", Ложь);	
	ОткрытьФорму("Документ.mega_СменноеЗадание.Форма.ФормаПодбораПоОстаткамПредыдущихВидовСтадийПроизводства", 
		ПараметрыОткрытия, ЭтотОбъект, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца)
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОстаткамПредыдущихВидовСтадийПроизводства(Команда)
	
	Если Объект.ТехнологическиеОперации.Количество() > 0 Тогда
		
		Режим = РежимДиалогаВопрос.ДаНет;
		ОписаниеОповещенияОЗавершении = 
			Новый ОписаниеОповещения("ПослеЗакрытияВопросаЗаполнитьПоОстаткамПредыдущихВидовСтадийПроизводства", ЭтотОбъект);	
		ПоказатьВопрос(ОписаниеОповещенияОЗавершении,
						НСтр("ru = 'Перед заполнением данные табличной части будут очищены. Продолжить?';"),
						Режим,
						0);
	Иначе
		ЗаполнитьПоОстаткамПредыдущихВидовСтадийПроизводстваНаСервере();
		ВывестиИнформациюОЗагруженностиПроизводственногоРесурсаСтрокой();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСоставПроизводственногоРесурса(Команда)
	
	ЗаполнитьСоставПроизводственногоРесурсаНаСервере();
	ВывестиИнформациюОЗагруженностиПроизводственногоРесурсаСтрокой();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОперациямиВыполняемымиНаЭтомРесурсе(Команда)
		
	Если Объект.ТехнологическиеОперации.Количество() > 0 Тогда
		
		Режим = РежимДиалогаВопрос.ДаНет;
		ОписаниеОповещенияОЗавершении = 
			Новый ОписаниеОповещения("ПослеЗакрытияВопросаЗаполнитьОперациямиВыполняемымиНаЭтомРесурсе", ЭтотОбъект);	
		ПоказатьВопрос(ОписаниеОповещенияОЗавершении,
						НСтр("ru = 'Перед заполнением данные табличной части будут очищены. Продолжить?';"),
						Режим,
						0);
	Иначе
		ЗаполнитьОперациямиВыполняемымиНаЭтомРесурсеНаСервере();
		ВывестиИнформациюОЗагруженностиПроизводственногоРесурсаСтрокой();
	КонецЕсли;	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПроизводственнаяСменаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ПроизводственнаяСмена) Тогда
		
		ЗаполнитьНачалоОкончаниеСменыНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроизводственныйРесурсПриИзменении(Элемент)
	
	ЗаполнитьСоставПроизводственногоРесурсаНаСервере();
	ВывестиИнформациюОЗагруженностиПроизводственногоРесурсаСтрокой();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСоставПроизводственногоРесурса

&НаКлиенте
Процедура СоставПроизводственногоРесурсаПриИзменении(Элемент)
	
	ВывестиИнформациюОЗагруженностиПроизводственногоРесурсаСтрокой();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТехнологическиеОперации

&НаКлиенте
Процедура ТехнологическиеОперацииПриИзменении(Элемент)
	
	ВывестиИнформациюОЗагруженностиПроизводственногоРесурсаСтрокой();
КонецПроцедуры

&НаКлиенте
Процедура ТехнологическиеОперацииНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТехнологическиеОперации.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		Структура = Новый Структура(
		"Номенклатура,
		|Спецификация,
		|ЕдиницаИзмерения,
		|ВидСтадииОбработки,
		|ТехнологическаяОперация,
		|ТехнологическаяОперацияЕдиницаИзмерения,
		|ТехнологическаяОперацияКоличество,
		|Количество");
		ЗаполнитьЗначенияСвойств(Структура, ТекущиеДанные);
		ПриИзмененииНоменклатурыНаСервере(Структура);
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, Структура);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТехнологическиеОперацииТехнологическаяОперацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТехнологическиеОперации.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		Спецификация = ТекущиеДанные.Спецификация;
		Если ЗначениеЗаполнено(Спецификация) Тогда			
			
			ВидСтадииОбработки = ТекущиеДанные.ВидСтадииОбработки;
			
			ТехОперации = Новый СписокЗначений(); 
			ТехОперации.ЗагрузитьЗначения(
				ПолучитьДоступныеТехнологическиеОперацииНаСервере(Спецификация, ВидСтадииОбработки));
			ДанныеВыбора = ТехОперации;
			
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТехнологическиеОперацииВидСтадииОбработкиПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТехнологическиеОперации.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		Спецификация = ТекущиеДанные.Спецификация;
		ВидСтадииОбработки = ТекущиеДанные.ВидСтадииОбработки;
		Если ЗначениеЗаполнено(Спецификация) И ЗначениеЗаполнено(ВидСтадииОбработки) Тогда			
			
			ТекущиеДанные.ТехнологическаяОперация = Неопределено;
			
			ТехОперации = ПолучитьДоступныеТехнологическиеОперацииНаСервере(Спецификация, ВидСтадииОбработки);
			Если ТехОперации.Количество() > 0 Тогда
				
				ТекущиеДанные.ТехнологическаяОперация = ТехОперации[0];
			КонецЕсли;
			
			ТехнологическиеОперацииТехнологическаяОперацияПриИзменении(Неопределено);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТехнологическиеОперацииТехнологическаяОперацияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТехнологическиеОперации.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		Структура = Новый Структура(
		"ТехнологическаяОперация,
		|Спецификация,
		|ВидСтадииОбработки,
		|ТехнологическаяОперацияЕдиницаИзмерения,
		|ТехнологическаяОперацияКоличество,
		|Количество");
		
		ЗаполнитьЗначенияСвойств(Структура, ТекущиеДанные);
		ПриИзмененииТехнологическойОперацииНаСервере(Структура);
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, Структура);
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ТехнологическиеОперацииВидСтадииОбработкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТехнологическиеОперации.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		Спецификация = ТекущиеДанные.Спецификация;
		Если ЗначениеЗаполнено(Спецификация) Тогда			
	
			ВидыСтадийОбработки = Новый СписокЗначений(); 
			//ВидыСтадийОбработки.ЗагрузитьЗначения(ПолучитьДоступныеВидыСтадийОбработкиНаСервере(Спецификация));
			ВидыСтадийОбработки.ЗагрузитьЗначения(
				ПолучитьДоступныеВидыСтадийОбработкиПоПроизводственномуРесурсуНаСервере(Спецификация, Объект.ПроизводственныйРесурс));
			ДанныеВыбора = ВидыСтадийОбработки;
			
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТехнологическиеОперацииКоличествоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТехнологическиеОперации.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		Структура = Новый Структура(
		"ТехнологическаяОперация,
		|Спецификация,
		|ВидСтадииОбработки,
		|ТехнологическаяОперацияКоличество,
		|Количество");
		
		ЗаполнитьЗначенияСвойств(Структура, ТекущиеДанные);		
		ПриИзмененииТехнологическаяОперацияКоличествоНаСервере(Структура);
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, Структура);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьСоставПроизводственногоРесурсаНаСервере()
	
	Состав = Справочники.mega_ПроизводственныеРесурсы.СоставПроизводственногоРесурса(Объект.ПроизводственныйРесурс);
	
	Объект.СоставПроизводственногоРесурса.Очистить();
	Пока Состав.Следующий() Цикл
		НоваяСтрока = Объект.СоставПроизводственногоРесурса.Добавить();
		НоваяСтрока.Элемент = Состав.Элемент;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ВремяДатыВСекунды(Дата)
	
	Возврат Число(Формат(Дата, "ДФ=HH;")) * 60*60 + 
			Число(Формат(Дата, "ДФ=mm;")) * 60 + 
			Число(Формат(Дата, "ДФ=ss;"));
КонецФункции

&НаСервере
Процедура ЗаполнитьНачалоОкончаниеСменыНаСервере()
	
	ОдинДень = 24*60*60;
	НачалоСмены = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ПроизводственнаяСмена, "НачалоСмены");
	ОкончаниеСмены = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ПроизводственнаяСмена, "ОкончаниеСмены");
	
	Объект.НачалоСмены = Объект.ДатаСмены + ВремяДатыВСекунды(НачалоСмены);
	Объект.ОкончаниеСмены = Объект.ДатаСмены + ВремяДатыВСекунды(ОкончаниеСмены);
	Если НачалоСмены > ОкончаниеСмены Тогда
				
		Объект.ОкончаниеСмены = Объект.ДатаСмены + ОдинДень + ВремяДатыВСекунды(ОкончаниеСмены);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаЗаполнитьПоОстаткамПредыдущихВидовСтадийПроизводства(Результат, Параметры) Экспорт
    
    Если Результат = КодВозвратаДиалога.Да Тогда
        
        Объект.ТехнологическиеОперации.Очистить();
    КонецЕсли;
	
	ЗаполнитьПоОстаткамПредыдущихВидовСтадийПроизводстваНаСервере();
	ВывестиИнформациюОЗагруженностиПроизводственногоРесурсаСтрокой();
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаЗаполнитьОперациямиВыполняемымиНаЭтомРесурсе(Результат, Параметры) Экспорт
    
    Если Результат = КодВозвратаДиалога.Да Тогда
        
        Объект.ТехнологическиеОперации.Очистить();
    КонецЕсли;
	
	ЗаполнитьОперациямиВыполняемымиНаЭтомРесурсеНаСервере();
	ВывестиИнформациюОЗагруженностиПроизводственногоРесурсаСтрокой();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИнициализацияТаблицыВидовСтадийТекущегоПроизводственногоРесурса(ПроизводственныйРесурс)
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТехнологическиеОперации.Ссылка КАК Спецификация,
		|	ТехнологическиеОперации.КлючСвязи
		|ПОМЕСТИТЬ втОперацииПроизводственногоРесурса
		|ИЗ
		|	Справочник.mega_Спецификации.ТехнологическиеОперации КАК ТехнологическиеОперации
		|ГДЕ
		|	ТехнологическиеОперации.Номенклатура.ПроизводственныйРесурс = &ПроизводственныйРесурс
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	втОперацииПроизводственногоРесурса.Спецификация,
		|	СтадииОбработки.ВидСтадииОбработки
		|ИЗ
		|	втОперацииПроизводственногоРесурса КАК втОперацииПроизводственногоРесурса
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.mega_Спецификации.СтадииОбработки КАК СтадииОбработки
		|		ПО втОперацииПроизводственногоРесурса.Спецификация = СтадииОбработки.Ссылка
		|		И втОперацииПроизводственногоРесурса.КлючСвязи = СтадииОбработки.КлючСвязи
		|СГРУППИРОВАТЬ ПО
		|	втОперацииПроизводственногоРесурса.Спецификация,
		|	СтадииОбработки.ВидСтадииОбработки";
	
	Запрос.УстановитьПараметр("ПроизводственныйРесурс", ПроизводственныйРесурс);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Возврат ВыборкаДетальныеЗаписи;	
КонецФункции

&НаСервереБезКонтекста
Функция ИнициализацияТаблицыДляПолученияОстатков(ВыборкаДетальныеЗаписи)
	
			
	ТаблицаДляПолученияОстатков = Новый ТаблицаЗначений();
	
	Типы = Новый Массив;
	Типы.Добавить(Тип("СправочникСсылка.mega_ВидыСтадийОбработки"));
	ОписаниеТипов = Новый ОписаниеТипов(Типы);
	ТаблицаДляПолученияОстатков.Колонки.Добавить("ВидСтадииОбработки", ОписаниеТипов);
	
	Типы = Новый Массив;
	Типы.Добавить(Тип("СправочникСсылка.mega_Спецификации"));
	ОписаниеТипов = Новый ОписаниеТипов(Типы);
	ТаблицаДляПолученияОстатков.Колонки.Добавить("Спецификация", ОписаниеТипов);
	
	ТаблицаДляПолученияОстатков.Очистить();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ТекущаяСтадияОбработки = Справочники.mega_Спецификации.ПолучитьСтадиюОбработкиПоВидуСтадииОбработки(
			ВыборкаДетальныеЗаписи.Спецификация, 
			ВыборкаДетальныеЗаписи.ВидСтадииОбработки);
		ПредыдущаяСтадияОбработки = Справочники.mega_Спецификации.ПолучитьПредыдущуюСтадиюОбработки(
			ВыборкаДетальныеЗаписи.Спецификация, ТекущаяСтадияОбработки);
		НоваяСтрока = ТаблицаДляПолученияОстатков.Добавить();
		НоваяСтрока.Спецификация = ВыборкаДетальныеЗаписи.Спецификация;
		НоваяСтрока.ВидСтадииОбработки = ПредыдущаяСтадияОбработки.ВидСтадииОбработки; 
	КонецЦикла;
	
	Возврат ТаблицаДляПолученияОстатков;
КонецФункции

&НаСервере
Функция ТаблицаОстатков(ТаблицаДляПолученияОстатков)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаДляПолученияОстатков.Спецификация,
		|	ТаблицаДляПолученияОстатков.ВидСтадииОбработки
		|ПОМЕСТИТЬ втТаблицаДляПолученияОстатков
		|ИЗ
		|	&ТаблицаДляПолученияОстатков КАК ТаблицаДляПолученияОстатков
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втТаблицаДляПолученияОстатков.Спецификация.Владелец КАК Номенклатура,
		|	втТаблицаДляПолученияОстатков.Спецификация.Владелец.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	втТаблицаДляПолученияОстатков.ВидСтадииОбработки,
		|	втТаблицаДляПолученияОстатков.Спецификация КАК Спецификация,
		|	СУММА(ЕСТЬNULL(mega_СкладскиеЗапасыОстатки.КоличествоОстаток, 0)) КАК НаСкладе,
		|	СУММА(ЕСТЬNULL(mega_ПроизводственныеЗапасыОстатки.КоличествоОстаток, 0)) КАК ВПроизводстве,
		|	СУММА(ЕСТЬNULL(mega_ПроизводственныеЗапасыОстатки.КоличествоОстаток, 0) +
		|		ЕСТЬNULL(mega_СкладскиеЗапасыОстатки.КоличествоОстаток, 0)) КАК Количество
		|ПОМЕСТИТЬ втОстатки
		|ИЗ
		|	втТаблицаДляПолученияОстатков КАК втТаблицаДляПолученияОстатков
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.mega_СкладскиеЗапасы.Остатки(, Подразделение = &Подразделение) КАК
		|			mega_СкладскиеЗапасыОстатки
		|		ПО втТаблицаДляПолученияОстатков.Спецификация.Владелец = mega_СкладскиеЗапасыОстатки.Номенклатура
		|		И втТаблицаДляПолученияОстатков.ВидСтадииОбработки = mega_СкладскиеЗапасыОстатки.ВидСтадииОбработки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.mega_ПроизводственныеЗапасы.Остатки(, Подразделение = &Подразделение) КАК
		|			mega_ПроизводственныеЗапасыОстатки
		|		ПО втТаблицаДляПолученияОстатков.Спецификация.Владелец = mega_ПроизводственныеЗапасыОстатки.Номенклатура
		|		И втТаблицаДляПолученияОстатков.ВидСтадииОбработки = mega_ПроизводственныеЗапасыОстатки.ВидСтадииОбработки
		|СГРУППИРОВАТЬ ПО
		|	втТаблицаДляПолученияОстатков.Спецификация.Владелец,
		|	втТаблицаДляПолученияОстатков.Спецификация.Владелец.ЕдиницаИзмерения,
		|	втТаблицаДляПолученияОстатков.ВидСтадииОбработки,
		|	втТаблицаДляПолученияОстатков.Спецификация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втОстатки.Номенклатура,
		|	втОстатки.ЕдиницаИзмерения,
		|	втОстатки.ВидСтадииОбработки,
		|	втОстатки.Спецификация,
		|	втОстатки.НаСкладе,
		|	втОстатки.ВПроизводстве,
		|	втОстатки.Количество
		|ИЗ
		|	втОстатки КАК втОстатки
		|ГДЕ
		|	втОстатки.Количество > 0";
	
	
	Запрос.УстановитьПараметр("ТаблицаДляПолученияОстатков", ТаблицаДляПолученияОстатков);
	Запрос.УстановитьПараметр("Подразделение", Объект.Подразделение);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();	
	
	Возврат ВыборкаДетальныеЗаписи;
КонецФункции

&НаСервере
Процедура ЗаполнитьПоОстаткам(ВыборкаОстатков)
	
	Пока ВыборкаОстатков.Следующий() Цикл
		
		Если ВыборкаОстатков.Количество <= 0 Тогда
			
			Продолжить;
		КонецЕсли;
		
		 ОбработатьВыборЗначенияПоОстаткамПредыдущихВидовСтадийПроизводстваНаСервере(ВыборкаОстатков);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоОстаткамПредыдущихВидовСтадийПроизводстваНаСервере()
	
	ВыборкаДетальныеЗаписи = 
		ИнициализацияТаблицыВидовСтадийТекущегоПроизводственногоРесурса(Объект.ПроизводственныйРесурс);
	ТаблицаДляПолученияОстатков = ИнициализацияТаблицыДляПолученияОстатков(ВыборкаДетальныеЗаписи);
	ВыборкаОстатков = ТаблицаОстатков(ТаблицаДляПолученияОстатков);
	
	ЗаполнитьПоОстаткам(ВыборкаОстатков);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОперациямиВыполняемымиНаЭтомРесурсеНаСервере()
	
	ВыборкаДетальныеЗаписи = 
		ИнициализацияТаблицыВидовСтадийТекущегоПроизводственногоРесурса(Объект.ПроизводственныйРесурс);
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Количество = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыборкаДетальныеЗаписи.Спецификация, "Количество");
		Номенклатура = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыборкаДетальныеЗаписи.Спецификация, "Владелец");
		ВыборкаТехнологическиеОперации = 
				Справочники.mega_Спецификации.ПолучитьТехнологическиеОперацииСпецификацииПоВидуСтадииОбработки(
				ВыборкаДетальныеЗаписи.Спецификация, ВыборкаДетальныеЗаписи.ВидСтадииОбработки, Количество);
		Пока ВыборкаТехнологическиеОперации.Следующий() Цикл
			
			НоваяСтрока = Объект.ТехнологическиеОперации.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
			НоваяСтрока.Номенклатура = Номенклатура;
			НоваяСтрока.Количество = Количество;
			НоваяСтрока.ЕдиницаИзмерения = 
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяСтрока.Номенклатура, "ЕдиницаИзмерения");
			
			НоваяСтрока.ТехнологическаяОперация = ВыборкаТехнологическиеОперации.Номенклатура;
			НоваяСтрока.ТехнологическаяОперацияЕдиницаИзмерения = 
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяСтрока.ТехнологическаяОперация, "ЕдиницаИзмерения"); 
			НоваяСтрока.ТехнологическаяОперацияКоличество = ВыборкаТехнологическиеОперации.Количество;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры


&НаСервере
Процедура ОбработатьВыборЗначенияПоОстаткамПредыдущихВидовСтадийПроизводстваНаСервере(ВыбранноеЗначение)
			
	ТекущаяСтадияОбработки = Справочники.mega_Спецификации.ПолучитьСтадиюОбработкиПоВидуСтадииОбработки(
		ВыбранноеЗначение.Спецификация, ВыбранноеЗначение.ВидСтадииОбработки);
	СледующияСтадияОбработки = Справочники.mega_Спецификации.ПолучитьСледующуюСтадиюОбработки(
		ВыбранноеЗначение.Спецификация, ТекущаяСтадияОбработки);
	НовыйВидСтадииОбработки = СледующияСтадияОбработки.ВидСтадииОбработки;
	
	Если ЗначениеЗаполнено(НовыйВидСтадииОбработки) Тогда
		
		ВыборкаТехнологическиеОперации = 
			Справочники.mega_Спецификации.ПолучитьТехнологическиеОперацииСпецификацииПоВидуСтадииОбработки(
				ВыбранноеЗначение.Спецификация, НовыйВидСтадииОбработки, ВыбранноеЗначение.Количество);
		Пока ВыборкаТехнологическиеОперации.Следующий() Цикл
			
			НоваяСтрока = Объект.ТехнологическиеОперации.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыбранноеЗначение);
			НоваяСтрока.ЕдиницаИзмерения = 
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяСтрока.Номенклатура, "ЕдиницаИзмерения");
			
			НоваяСтрока.ВидСтадииОбработки = НовыйВидСтадииОбработки;
			
			НоваяСтрока.ТехнологическаяОперация = ВыборкаТехнологическиеОперации.Номенклатура;
			НоваяСтрока.ТехнологическаяОперацияЕдиницаИзмерения = 
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяСтрока.ТехнологическаяОперация, "ЕдиницаИзмерения"); 
			НоваяСтрока.ТехнологическаяОперацияКоличество = ВыборкаТехнологическиеОперации.Количество;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДоступныеТехнологическиеОперацииНаСервере(Спецификация, ВидСтадииОбработки)
	Возврат Справочники.mega_Спецификации.ПолучитьДоступныеТехнологическиеОперации(Спецификация, ВидСтадииОбработки);
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДоступныеВидыСтадийОбработкиПоПроизводственномуРесурсуНаСервере(Спецификация, ПроизводственныйРесурс)
	Возврат Справочники.mega_Спецификации.ПолучитьДоступныеВидыСтадийОбработкиПоПроизводственномуРесурсу(
		Спецификация, ПроизводственныйРесурс);
КонецФункции

&НаСервереБезКонтекста
Процедура ПриИзмененииТехнологическаяОперацияКоличествоНаСервере(Структура)
	
	
	Если ЗначениеЗаполнено(Структура.Спецификация)
		И ЗначениеЗаполнено(Структура.ВидСтадииОбработки)
		И ЗначениеЗаполнено(Структура.ТехнологическаяОперация) Тогда
				
		Структура.ТехнологическаяОперацияКоличество = 
			ПолучитьДлительностьТехнологическойОперацииНаСервере(
				Структура.Спецификация, Структура.ВидСтадииОбработки, Структура.ТехнологическаяОперация) * 
					Структура.Количество;	
	КонецЕсли;	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПриИзменениитехнологическойОперацииНаСервере(Структура)
	
	Структура.ТехнологическаяОперацияЕдиницаИзмерения = Справочники.mega_ЕдиницыИзмерения.ПустаяСсылка();
			
	Если ЗначениеЗаполнено(Структура.ТехнологическаяОперация) Тогда
				
		Структура.ТехнологическаяОперацияЕдиницаИзмерения = 
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Структура.ТехнологическаяОперация, "ЕдиницаИзмерения");
		Структура.ТехнологическаяОперацияКоличество = Структура.Количество;	
		
		ПриИзмененииТехнологическаяОперацияКоличествоНаСервере(Структура);	
	КонецЕсли;	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПриИзмененииНоменклатурыНаСервере(Структура)
	
	Структура.ЕдиницаИзмерения = Справочники.mega_ЕдиницыИзмерения.ПустаяСсылка();
	Структура.Спецификация = Справочники.mega_Спецификации.ПустаяСсылка();
	Структура.ВидСтадииОбработки = Справочники.mega_ВидыСтадийОбработки.ПустаяСсылка();
	Структура.ТехнологическаяОперация = Справочники.mega_Номенклатура.ПустаяСсылка();
	Структура.ТехнологическаяОперацияЕдиницаИзмерения = Справочники.mega_ЕдиницыИзмерения.ПустаяСсылка();
	Структура.ТехнологическаяОперацияКоличество = 0;
	Структура.Количество = 0;	
		
	Если ЗначениеЗаполнено(Структура.Номенклатура) Тогда
		
		Структура.ЕдиницаИзмерения = 
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Структура.Номенклатура, "ЕдиницаИзмерения");		
		Структура.Спецификация = Справочники.mega_Спецификации.ПолучитьОсновнуюСпецификациюНоменклатуры(Структура.Номенклатура);
		
		Если ЗначениеЗаполнено(Структура.Спецификация) Тогда
			ПоследнюяСтадияОбработки = Справочники.mega_Спецификации.ПолучитьПоследнююСтадиюОбработки(Структура.Спецификация);
			Структура.ВидСтадииОбработки = ПоследнюяСтадияОбработки.ВидСтадииОбработки; 
		КонецЕсли;		
	КонецЕсли;	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДлительностьТехнологическойОперацииНаСервере(Спецификация, ВидСтадииОбработки, ТехнологическаяОперация)
    
	Возврат Справочники.mega_Спецификации.ПолучитьДлительностьТехнологическойОперации(
   		Спецификация, ВидСтадииОбработки, ТехнологическаяОперация);   
КонецФункции

&НаКлиенте
Процедура ПослеЗакрытияВопросаОНеобходимостиЗаполненияПоПлануПроизводства(Результат, Параметры) Экспорт
    
    Если Результат = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
	
	Объект.ТехнологическиеОперации.Очистить();	
	ЗаполнитьПоПлануПроизводстваНаСервере();
	
	ВывестиИнформациюОЗагруженностиПроизводственногоРесурсаСтрокой();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоПлануПроизводстваНаСервере()
    
    ДокументОбъект = РеквизитФормыВЗначение("Объект");
    ДокументОбъект.ЗаполнитьПоПлануПроизводства();
   	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
КонецПроцедуры

// Управляет доступностью элементов формы.
&НаКлиенте
Процедура УправлениеДоступностью()
	

КонецПроцедуры

&НаКлиенте
Процедура ВывестиИнформациюОЗагруженностиПроизводственногоРесурсаСтрокой()
	
	Элементы.ТехнологическиеОперацииТехнологическаяОперацияКоличество.ТекстПодвала = 
		ПолучитьИнформациюОЗагруженностиПроизводственногоРесурсаСтрокой();
КонецПроцедуры

&НаСервере
Функция ПолучитьИнформациюОЗагруженностиПроизводственногоРесурсаСтрокой()
	
	ОдинЧас = 60*60; 
	
	КоличествоЭлементовПроизводственногоРесурса = Объект.СоставПроизводственногоРесурса.Количество();
	Если КоличествоЭлементовПроизводственногоРесурса = 0 Тогда
		
		КоличествоЭлементовПроизводственногоРесурса = 1;
	КонецЕсли;
	
	ДоступноеВремяПроизводственногоРесурсаВЧасах = 
		Окр((Объект.ОкончаниеСмены - Объект.НачалоСмены) * КоличествоЭлементовПроизводственногоРесурса / ОдинЧас, 
			0, 
			РежимОкругления.Окр15как20);
	
	ЗанятоеВремяПроизводственногоРесурсаВПроцентах = 0;	
	Если ДоступноеВремяПроизводственногоРесурсаВЧасах > 0 Тогда
		
		ЗанятоеВремяПроизводственногоРесурсаВЧасах = 
			Окр(Объект.ТехнологическиеОперации.Итог("ТехнологическаяОперацияКоличество") / ОдинЧас, 0, РежимОкругления.Окр15как20);
	
		ЗанятоеВремяПроизводственногоРесурсаВПроцентах = 
			Окр(ЗанятоеВремяПроизводственногоРесурсаВЧасах * 100 / ДоступноеВремяПроизводственногоРесурсаВЧасах, 2, РежимОкругления.Окр15как20);
	КонецЕсли;	
	Возврат СтрШаблон("Занятость ресурса %1", ЗанятоеВремяПроизводственногоРесурсаВПроцентах) + "%";	
КонецФункции

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
	МодульПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	МодульПодключаемыеКоманды = ОбщегоНазначения.ОбщийМодуль("ПодключаемыеКоманды");
	МодульПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	МодульПодключаемыеКомандыКлиентСервер = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиентСервер");
	МодульПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти 

